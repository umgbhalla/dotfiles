# Backend
backend = "glx";

# GLX backend

glx-no-stencil = true;
glx-copy-from-front = false;


# shadow = true;
# shadow-radius = 20;
# shadow-opacity = 0.6;
# shadow-offset-x = 15;
# shadow-offset-y = 15;

# shadow = true;

# # # The blur radius for shadows, in pixels. (defaults to 12)
# # # shadow-radius = 12
# shadow-radius = 14;

# # # The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
# shadow-opacity = 0.65

# # # The left offset for shadows, in pixels. (defaults to -15)
# # # shadow-offset-x = -15
# shadow-offset-x = 2;

# # # The top offset for shadows, in pixels. (defaults to -15)
# # # shadow-offset-y = -15
# shadow-offset-y = 2;

# # Shadows
# # Enabled client-side shadows on windows.
# shadow = false;
# # The blur radius for shadows. (default 12)
# shadow-radius = 5;
# # The left offset for shadows. (default -15)
# shadow-offset-x = -5;
# # The top offset for shadows. (default -15)
# shadow-offset-y = -5;
# # The translucency for shadows. (default .75)
# shadow-opacity = 0.5;

# # Set if you want different colour shadows
shadow-red = 0.3;
shadow-green = 0.3;
shadow-blue = 0.4;

shadow-exclude = [
    "! name~=''",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "name *= 'compton'",
    "name *= 'picom'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "class_g = 'Firefox' && argb",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;

# Opacity

inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
# blur-background = false;
# Blur background of opaque windows with transparent frames as well.
# blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
#blur-background-fixed = false;
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'"
];

blur: {
  method = "dual_kawase";
  strength = 7;
  background = true;
  # background-frame = false;
  # background-fixed = false;
}


# Fading

# # Fade windows during opacity changes.
# fading = true;
# # The time between steps in a fade in milliseconds. (default 10).
# fade-delta = 6;
# # Opacity change between steps while fading in. (default 0.028).
# fade-in-step = 0.03;
# # Opacity change between steps while fading out. (default 0.03).
# fade-out-step = 0.03;
# # Fade windows in/out when opening/closing
# no-fading-openclose = false;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];

# Other
# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 0;

# Vertical synchronization: match the refresh rate of the monitor
# Enable/disable VSync.
vsync = true;
#vsync = false;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

# Window type settings
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.9; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.9; }
  dropdown_menu = { opacity = 0.9; }
  normal = {full-shadow = true;}
};
######################
#
# XSync
# See: https://github.com/yshui/picom/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
#
######################
corner-radius = 12
# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;
# transparency for terminal emulators
# opacity-rule = ["85:class_g = 'Xfce4-terminal'"];
opacity-rule = [
# "80:class_g = 'Alacritty' ",
"85:class_g = 'Alacritty' && focused",
"70:class_g = 'Alacritty' && !focused",
];
